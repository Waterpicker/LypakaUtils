plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

//apply plugin: 'com.github.johnrengelman.shadow'

group = 'com.lypaka'
version = '1.0.0'

java {
    archivesBaseName = 'LypakaUtils'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.19.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

                        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'LypakaUtils'
            
            mods {
                lypakautils {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

                        property 'forge.enabledGameTestNamespaces', 'LypakaUtils'
            
            mods {
                lypakautils {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'LypakaUtils'

            mods {
                lypakautils {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'lypakautils', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                lypakautils {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


configurations {
    library
    implementation.extendsFrom library
}

repositories {
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.0'
    implementation group: 'ninja.leaping.configurate', name: 'configurate-hocon', version: '3.7.1'
    library group: 'ninja.leaping.configurate', name: 'configurate-hocon', version: '3.7.1'
    compileOnly group: 'ninja.leaping.configurate', name: 'configurate-hocon', version: '3.7.1'
    shadow group: 'ninja.leaping.configurate', name: 'configurate-hocon', version: '3.7.1'
    implementation group: 'ninja.leaping.configurate', name: 'configurate-core', version: '3.7.1'
    library group: 'ninja.leaping.configurate', name: 'configurate-core', version: '3.7.1'
    compileOnly group: 'ninja.leaping.configurate', name: 'configurate-core', version: '3.7.1'
    shadow group: 'ninja.leaping.configurate', name: 'configurate-core', version: '3.7.1'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title": "lypakautils",
                            //"Specification-Vendor": "lypakautils authors",
                            "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                            //"Implementation-Vendor": "lypakautils authors",
                            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    dependsOn('reobfJar')
    zip64 = true
    classifier = 'universal'
    configurations = [project.configurations.shadow]
    archiveName = 'LypakaUtils-1.19.2-0.0.9.jar'
    
    exclude "**/module-info.class"
    exclude 'dummyThing'
}

reobf {
    shadowJar {}
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
